{"version":3,"sources":["serviceWorker.js","components/HomeStyle.js","components/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","Container","styled","div","_templateObject","SearchDiv","_templateObject2","ResultWrapper","_templateObject3","ResultDiv","_templateObject4","Link","a","_templateObject5","Search","Input","Meta","Card","Home","_useState","useState","_useState2","Object","slicedToArray","value","_useState3","_useState4","isEmpty","updateEmpty","_useState5","_useState6","books","updateBooks","_handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","res","_ref","items","wrap","_context","prev","next","fetch","concat","process","sent","json","stop","apply","this","arguments","react_default","createElement","placeholder","onSearch","_x","handleSubmit","size","style","width","enterButton","map","book","i","card","key","hoverable","padding","cover","alt","volumeInfo","title","src","imageLinks","thumbnail","description","authors","elem","publisher","target","href","infoLink","ReactDOM","render","components_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.854b08d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const SearchDiv = styled.div`\r\n  height: 30%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ResultWrapper = styled.div`\r\n  height: 70%;\r\n  padding: 1%;\r\n`;\r\n\r\nexport const ResultDiv = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  background-color: #40a9ff;\r\n  color: white;\r\n  padding: 10px 21px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  border-radius: 15%;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  SearchDiv,\r\n  ResultWrapper,\r\n  ResultDiv,\r\n  Link\r\n} from \"./HomeStyle\";\r\nimport { Input, Card } from \"antd\";\r\n\r\nconst Search = Input.Search;\r\nconst { Meta } = Card;\r\n\r\nconst Home = () => {\r\n  const [value, setValue] = useState(\r\n    \"Error: Please provide a search query first\"\r\n  );\r\n  const [isEmpty, updateEmpty] = useState(false);\r\n  const [books, updateBooks] = useState([]);\r\n\r\n  async function handleSubmit(value) {\r\n    // console.log(process.env.REACT_APP_GOOGLE_API_KEY)\r\n    if (!value) {\r\n      updateEmpty(true);\r\n      updateBooks([]);\r\n    } else {\r\n      updateEmpty(false);\r\n      const res = await fetch(\r\n        `https://www.googleapis.com/books/v1/volumes?q=${value}&key=${\r\n          process.env.REACT_APP_GOOGLE_API_KEY\r\n        }`\r\n      );\r\n      const { items } = await res.json();\r\n\r\n\r\n    // console.log(items);\r\n     updateBooks(items);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SearchDiv>\r\n        <h2>BOOK FINDER</h2>\r\n        <Search\r\n          placeholder=\"input book title or author...\"\r\n          onSearch={value => handleSubmit(value)}\r\n          size=\"large\"\r\n          style={{ width: \"60%\" }}\r\n          enterButton=\"Search\"\r\n        />\r\n      </SearchDiv>\r\n\r\n      <ResultWrapper>\r\n        {isEmpty && <h3>{value}</h3>}\r\n        <ResultDiv>\r\n          {books && (books.map((book, i) => (\r\n            <Card\r\n              key={i}\r\n              hoverable\r\n              style={{ width: 240, padding: \"5px\" }}\r\n              cover={\r\n                <img\r\n                  alt={ book.volumeInfo && book.volumeInfo.title}\r\n                  src={book.volumeInfo.imageLinks && book.volumeInfo.imageLinks.thumbnail}\r\n                />\r\n              }\r\n            >\r\n              <Meta\r\n                title={`${book.volumeInfo.title}`}\r\n                description={`Author: ${book.volumeInfo.authors && book.volumeInfo.authors.map(\r\n                  elem => elem\r\n                )}`}\r\n              />\r\n              <p>Published by: { book.volumeInfo && book.volumeInfo.publisher}</p>\r\n              <Link target=\"_blank\" href={book.volumeInfo && book.volumeInfo.infoLink}>\r\n                Click\r\n              </Link>\r\n            </Card>\r\n          )))}\r\n        </ResultDiv>\r\n      </ResultWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Home from \"./components/Home\";\nimport \"antd/dist/antd.css\";\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}